#!/usr/bin/awk -f
#
# Stripmine specific characters out of a fixed-width BDF font file and
# generate a C array representation of the font subset.
#
# Usage: bdf_extract <fontfiles>
#
# Two variables may be set:
#
# charlist - a list of encoding values to be extracted from the font. Defaults
#            to space, the digits 0 - 9, dash, period, colon and the letters A-Z
# basename - the base name of the .c/.h files to generate
#

function reinit() {
        encoding = -1
        font_width = -1
        font_height = -1
        bytes_per_line = -1
        row = -1
        font_foundry = ""
        font_family = ""
        font_weight = ""
}

BEGIN {
        if (charlist == "") {
                charlist = "32 45 46 48 49 50 51 52 53 54 55 56 57 58 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90"
        }
        n_selected_chars = split(charlist, selected_chars)

        if (basename == "") {
                basename = "fonts"
        }
        print "writing fonts to " basename
        c_file = basename ".c"
        c_hdr = basename ".h"
        print "/* AUTOMATICALLY GENERATED - DO NOT EDIT */"                     > c_file
        print "#include <stdint.h>"                                             > c_file
        print "/* AUTOMATICALLY GENERATED - DO NOT EDIT */"                     > c_hdr

        reinit()
}


NF == 0 { next }
#{print "trace: " NF " " $0}

# assume the font is fixed and get dimensions from the bounding box
$1 == "FONTBOUNDINGBOX" {
        font_width = $2
        font_height = $3
        bytes_per_line = int((font_width + 7) / 8)
#       print "dimensions " font_width " " font_height " " bytes_per_line
        next
}

$1 == "FOUNDRY" {
        font_foundry = substr($2, 2, length($2) - 2)
}

$1 == "FAMILY_NAME" {
        font_family = substr($2, 2, length($2) - 2)
}

$1 == "WEIGHT_NAME" {
        font_weight = substr($2, 2, length($2) - 2)
}

# a new character arrives
$1 == "ENCODING" {
#       print "encoding " $2
        encoding = $2
        next
}

# the character bitmap arrives
$1 == "BITMAP" {
#       print "bitmap"
        row = 0
        bitmap = ""
        next
}

# the character bitmap ends
$1 == "ENDCHAR" {
#       print "endchar " encoding
        if (row != font_height) {
                print "encoding missing row(s), got " row " expected " font_height
                exit 1
        }
        char[encoding] = bitmap
        row = -1
        encoding = -1
        next
}

# a row arrives
(NF == 1) && (encoding >= 0) && (row >= 0) {
        digits = $0
#       print "row " digits
        while (digits != "") {
                val = substr(digits, 1, 2)
                digits = substr(digits, 3, length(digits) - 2)
                bitmap = bitmap " " val
        }
        row = row + 1
        next
}

$1 == "ENDFONT" {
        fontname = font_foundry "_" font_family "_" font_weight "_" font_width "x" font_height

        print "/*"                                                              >> c_file
        print " * Font: " fontname                                              >> c_file
        print " *"                                                              >> c_file
        print " * Font array: <header> <encoding table> <data>"                 >> c_file
        print " * "                                                             >> c_file
        print " * <header>: bbox_width bbox_height nchars"                      >> c_file
        print " * <encoding table>: one byte for each of nchars, "              >> c_file
        print " *                   gives ascii value of character"             >> c_file
        print " * <data>: ((bbox_width + 7) / 8) * bbox_height"                 >> c_file
        print " *         bytes per character, MSB leftmost"                    >> c_file
        print " */"                                                             >> c_file

        print "const unsigned char font_" fontname "[] = {"                     >> c_file
        print "extern const uint8_t font_" fontname "[];"                       >> c_hdr
        print "/* header */"                                                    >> c_file
        print font_width "," font_height "," n_selected_chars ","               >> c_file
        print "/* encoding table */"                                            >> c_file
        for (n = 1; n <= n_selected_chars; n = n + 1) {
                print selected_chars[n] ","                                     >> c_file
        }
        for (n = 1; n <= n_selected_chars; n = n + 1) {
                enc = selected_chars[n]
                print "/* char " enc " */"                                      >> c_file
                nbytes = split(char[enc], bits)
                for (j = 1; j <= nbytes; j++) {
                        print "0x" bits[j] ","                                  >> c_file
                }
        }
        print "};"                                                              >> c_file

        nextfile
}

#{ print "ignored '" $0 "'"}
