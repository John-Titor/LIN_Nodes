PEG LIN_NDF (network_definition_file)

##
## syntax
##

###################################################################################################

network_definition_file     <- SPACE 'LIN_description_file' SEMICOLON 
                                LIN_protocol_version_def
                                LIN_language_version_def
                                LIN_speed_def
                                Channel_name_def?
                                Node_def
                                # Node_composition_def?      XXX obtained from NCF
                                Signal_def
                                Diag_signal_def?
                                Frame_def
                                Sporadic_frame_def?
                                Event_triggered_frame_def?
                                Diag_frame_def?
                                # Node_attributes_def       XXX obtained from NCF
                                Schedule_table_def
                                # Signal_groups_def?        XXX 1.3 only
                                Signal_encoding_type_def?
                                Signal_representation_def?
                                EOF ;

    LIN_protocol_version_def    <- 'LIN_protocol_version' EQUALS String SEMICOLON ;
    LIN_language_version_def    <- 'LIN_language_version' EQUALS String SEMICOLON ;
    LIN_speed_def               <- 'LIN_speed' EQUALS
                                    (Real 'kbps' / Integer)
                                    SEIMICOLON ;
    Channel_name_def            <- 'Channel_name' EQUALS String SEMICOLON ;

###################################################################################################

Node_def                    <- 'Nodes' OBRACE
                                'Master:' master_node COMMA time_base COMMA jitter SEMICOLON
                                'Slaves:' slave_node_list SEMICOLON
                                CBRACE ;

    master_node                 <- Name ;
    time_base                   <- Real 'ms' ;
    jitter                      <- Real 'ms' ;
    slave_node_list             <- Name (COMMA Name)* ;

###################################################################################################

Signal_def                  <- 'Signals' OBRACE
                                signal*
                                CBRACE ;

    signal                      <- Name ':' 
                                    signal_size
                                    COMMA signal_init_value
                                    COMMA signal_publisher 
                                    (COMMA signal_subscribers)
                                    SEMICOLON ;

Diag_signal_def             <- 'Diagnostic_signals' OBRACE
                                diag_signal*
                                CBRACE ;

    diag_signal                 <- Name ':' 
                                    signal_size
                                    COMMA signal_init_value
                                    SEMICOLON ;

        signal_size                 <- Integer ;
        signal_init_value           <- Integer ;
        signal_publisher            <- Name ;
        signal_subscribers          <- Name (COMMA Name)* ;

###################################################################################################

Frame_def                   <- 'Frames' OBRACE
                                frame*
                                CBRACE ;

    frame                       <- Name ':' 
                                    frame_id
                                    COMMA frame_publisher
                                    COMMA frame_size
                                    OBRACE
                                    frame_signal*
                                    CBRACE ;

        frame_publisher             <- Name ;
        frame_size                  <- Integer ;

        frame_signal                <- frame_signal_name COMMA frame_signal_offset SEMICOLON ;

            frame_signal_name           <- Name
            frame_signal_offset         <- Integer

Sporadic_frame_def          <- 'Sporadic_frames' OBRACE CBRACE ;
Event_triggered_frame_def   <- 'Event_triggered_frames' OBRACE CBRACE ;

Diag_frame_def              <- 'Diagnostic_frames' OBRACE
                                diag_frame*
                                CBRACE ;

    diag_frame                  <- Name ':'
                                    frame_id
                                    OBRACE
                                    frame_signal*
                                    CBRACE ;

###################################################################################################

Schedule_table_def          <- 'Schedule_tables' OBRACE
                                schedule_table*
                                CBRACE ;

    schedule_table              <- Name OBRACE
                                    (schedule_command 'delay' frame_time 'ms' SEMICOLON)+
                                    CBRACE ;

        schedule_command            <- Name | free_form_frame ;   # XXX missing 'macro' definitions

            free_form_frame         <- 'FreeFormat' OBRACE
                                        Integer COMMA Integer COMMA
                                        Integer COMMA Integer COMMA
                                        Integer COMMA Integer COMMA
                                        Integer COMMA Integer
                                        CBRACE ;

        frame_time                  <- Integer ;

###################################################################################################

Signal_encoding_type_def    <- 'Signal_encoding_types' OBRACE
                                encoding*
                                CBRACE ;

    encoding                    <- Name OBRACE
                                    (logical_value | physical_range)+
                                    CBRACE ;

        logical_value               <- 'logical_value'
                                        COMMA Integer
                                        (COMMA String)?
                                        SEMICOLON ;
        physical_range              <- 'physical_value'
                                        COMMA Integer
                                        COMMA Integer 
                                        COMMA Real
                                        COMMA Real
                                        (COMMA String)? SEMICOLON ;

###################################################################################################

Signal_representation_def   <- 'Signal_representation' OBRACE
                                signal_representation
                                CBRACE ;

    signal_representation       <- Name ':' 
                                    signal_name
                                    (COMMA signal_name)
                                    SEMICOLON ;

        signal_name                 <- Name ;

###################################################################################################

# terminals
        Name                <- SPACE name_value SPACE       ;
leaf:   name_value          <- <alpha> ([_] / <alnum>)*     ;
        Integer             <- SPACE integer_value SPACE    ;
leaf:   integer_value       <- '0x' <xdigit>+ / <ddigit>+   ;
        Real                <- SPACE real_value SPACE       ;
leaf:   real_value          <- <ddigit> ('.' / <ddigit>)*   ;
        String              <- OQUOTE string_value CQUOTE   ;
leaf:   string_value        <- (!QUOTE .)*                  ;


# tokens
void:   OBRACE              <- SPACE '{' SPACE              ;
void:   CBRACE              <- SPACE '}' SPACE              ;
void:   OQUOTE              <- SPACE QUOTE                  ;
void:   CQUOTE              <- QUOTE SPACE                  ;
void:   QUOTE               <- '"'                          ;
void:   SPACE               <- (<space> / EOL / COMMENT)*   ;
void:   EQUALS              <- SPACE '=' SPACE              ;
void:   COMMENT             <- '//' (!EOL .)* EOL           ;   # XXX no support for /* */
void:   SEMICOLON           <- SPACE ';' SPACE              ;
void:   COMMA               <- SPACE ',' SPACE              ;
void:   EOL                 <- '\n\r' / '\n' / '\r'         ;
void:   EOF                 <- !.                           ;

END;
