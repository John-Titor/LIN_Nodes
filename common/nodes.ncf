// ----------------------------------------------------------------------------
// "THE BEER-WARE LICENSE" (Revision 42):
// <msmith@purgatory.org> wrote this file. As long as you retain this notice you
// can do whatever you want with this stuff. If we meet some day, and you think
// this stuff is worth it, you can buy me a beer in return.
// ----------------------------------------------------------------------------

node_capability_file;
LIN_language_version = "2.1";

//
// Generic node definition that can be used when talking to an arbitrary
// node before it has been identified. Defines the baseline for nodes
// in the system.
//
node Generic {
    general {
        supplier = 0xb007;
        function = 0x0000;
        variant = 0x00;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }    
    diagnostic {
        NAD = 1 to 32;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb2 };
    }
    frames {
        publish SlaveResponse {
            length = 8;
            frame_id = 0x3d;
            signals {
                nad             { size = 8; offset = 0; }
                length          { size = 4; offset = 8; }
                pci             { size = 4; offset = 12; pci; }
                sid             { size = 8; offset = 16; service_id; }
                d1              { size = 8; offset = 24; }
                d2              { size = 8; offset = 32; }
                d3              { size = 8; offset = 40; }
                d4              { size = 8; offset = 48; }
                d5              { size = 8; offset = 56; }
            }
        }
        publish ReadByID {
            length = 0;
            signals {
                nad             { size = 8; offset = 0; }
                length          { size = 4; offset = 8; }
                pci             { size = 4; offset = 12; pci; }
                sid             { size = 8; offset = 16; service_id; }
                vendor          { size = 16; offset = 24; }
                function        { size = 16; offset = 40; }
                variant         { size = 8; offset = 56; }
            }
        }
        publish DataByID {
            length = 8;
            signals {
                nad             { size = 8; offset = 0; }
                length          { size = 4; offset = 8; }
                pci             { size = 4; offset = 12; pci; }
                sid             { size = 8; offset = 16; service_id; }
                index           { size = 16; offset = 24; }
                value           { size = 16; offset = 40; }
                d5              { size = 8; offset = 56; }
            }
        }
        publish ServiceError {
            length = 8;
            signals {
                nad             { size = 8; offset = 0; }
                length          { size = 4; offset = 8; }
                pci             { size = 4; offset = 12; pci; }
                sid             { size = 8; offset = 16; service_id; }
                original_sid    { size = 8; offset = 24; service_id; }
                error           { size = 8; offset = 32; service_error; }
                d3              { size = 8; offset = 40; }
                d4              { size = 8; offset = 48; }
                d5              { size = 8; offset = 56; }
            }
        }
        subscribe MasterRequest {}
    }
    parameters {
        // 0x000-0x0ff firmware properties
        ProtocolVersion     { address = 0x0000; }
        BoardFunction       {                   board_function; }
        OperationMode       {                   operation_magic; }
        FirmwareVersion     {                   }
        FirmwarePageSize    {                   }

        // 0x100-0x1ff operational status
        WatchdogResets      { address = 0x0100; }
        SupplyVoltage       {                   }
        Temperature         {                   }
        FreeMem             {                   }

        // 0x200-0x2ff link status
        Line                { address = 0x0200; }
        Checksum            {                   }
        Parity              {                   }
        Framing             {                   }
        Synch               {                   }
        Protocol            {                   }

        // 0x300-0x3ff function status (node specfic)

        // 0x400-0x4ff non-volatile parameters
        ConfigBase          { address = 0x0400; }
        ConfigTop           { address = 0x04ef; }
    }
    encoding {
        board_function {
            logical_value, 0, "Unknown";
            logical_value, 1, "Master";
            logical_value, 2, "PowerV1";
            logical_value, 3, "PowerV3";
            logical_value, 4, "ECUBridge";
            logical_value, 5, "Dashboard";
            logical_value, 6, "Tester";
            logical_value, 255, "Unconfigured";
        }
        operation_magic {
            logical_value, 0, "Program";
            logical_value, 1, "Bootloader";
            logical_value, 2, "Test";
            logical_value, 0x4f42, "EnterBootloader";
            logical_value, 0x4d54, "EnterTest";
        }
        service_error {
            logical_value, 0x12, "FunctionNotSupported";
            logical_value, 0x13, "IncorrectLength";
            logical_value, 0x22, "ConditionsNotCorrect";
            logical_value, 0x31, "OutOfRange";
            logical_value, 0x33, "AccessDenied";
            logical_value, 0x72, "GeneralFailure";
        }
   }
}

node Bootloader {
    general {
        supplier = 0xb007;
        function = 0x0000;
        variant = 0x00;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }    
    diagnostic {
        NAD = 32;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb4 };
    }
    frames {
        subscribe MasterRequest {}
    }
    parameters {
        Status              { address = 0x0300; bl_status; }
        PageAddress         {                   }
        PageOffset          {                   }
        PageCRC             {                   }
        DebugPointer        {                   }
        Reason              {                   bl_reason; }
        Memory              {                   }
        EEPROM              {                   }
    }
    encoding {
        bl_status {
            logical_value, 0, "WaitingForProgrammer";
            logical_value, 1, "ReadyForPage";
            logical_value, 2, "PageInProgress";
            logical_value, 3, "PageCRCError";
            logical_value, 4, "PageAddressError";
        }
        bl_reason {
            logical_value, 0, "Unspecified";
            logical_value, 1, "CRCMismatch";
            logical_value, 2, "Forced";
        }
    }
}

node Master {
    general {
        LIN_protocol_version = "1.0";
        supplier = 0xb007;
        function = 0x0001;  // board_function::kMaster
        variant = 0x01;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "yes";
    }
    diagnostic {
        NAD = 1;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb2 };
    }
    frames {
        publish Relays {
            length = 8;
            min_period = 10 ms;
            max_period = 100 ms;
            frame_id = 0x01;
            signals {
                Ignition        { size = 1; offset = 0; }
                Start           { size = 1; offset = 1; }
                LightsUp        { size = 1; offset = 2; }
                LightsDown      { size = 1; offset = 3; }
                HeadLights      { size = 1; offset = 4; }
                LowBeam         { size = 1; offset = 5; }
                HighBeam        { size = 1; offset = 6; }
                FogLights       { size = 1; offset = 7; }
                MarkerLights    { size = 1; offset = 8; }
                LeftTurn        { size = 1; offset = 9; }
                LeftTurnMarker  { size = 1; offset = 10; }
                RightTurn       { size = 1; offset = 11; }
                RightTurnMarker { size = 1; offset = 12; }
                Brake           { size = 1; offset = 13; }
                Reverse         { size = 1; offset = 14; }
                InteriorLight   { size = 1; offset = 15; }
                CabinFan1       { size = 1; offset = 16; }
                CabinFan2       { size = 1; offset = 17; }
                CabinFan3       { size = 1; offset = 18; }
                CabinFan4       { size = 1; offset = 19; }
                WiperLow        { size = 1; offset = 20; }
                WiperHigh       { size = 1; offset = 21; }
                RearDefrost     { size = 1; offset = 22; }
            }
        }
        publish MasterRequest {
            length = 8;
            frame_id = 0x3c;
            signals {
                nad             { size = 8; offset = 0; node_address; }
                length          { size = 4; offset = 8; }
                pci             { size = 4; offset = 12; pci; }
                sid             { size = 8; offset = 16; service_id; }
                d1              { size = 8; offset = 24; }
                d2              { size = 8; offset = 32; }
                d3              { size = 8; offset = 40; }
                d4              { size = 8; offset = 48; }
                d5              { size = 8; offset = 56; }
            }
        }
        subscribe SlaveResponse {}
    }
    parameters {
        SP1Assign               { init_value = 0;   address = 0x0400; input_assignment; }
        SP1Mode                 { init_value = 1;                     sp_input_type;  }
        SP2Assign               { init_value = 0;                     input_assignment; }
        SP2Mode                 { init_value = 1;                     sp_input_type;  }
        SP3Assign               { init_value = 0;                     input_assignment; }
        SP3Mode                 { init_value = 1;                     sp_input_type;  }
        SP4Assign               { init_value = 0;                     input_assignment; }
        SP4Mode                 { init_value = 1;                     sp_input_type;  }
        SP5Assign               { init_value = 0;                     input_assignment; }
        SP5Mode                 { init_value = 1;                     sp_input_type;  }
        SP6Assign               { init_value = 0;                     input_assignment; }
        SP6Mode                 { init_value = 1;                     sp_input_type;  }
        SP7Assign               { init_value = 0;                     input_assignment; }
        SP7Mode                 { init_value = 1;                     sp_input_type;  }

        SG0Assign               { init_value = 0;                     input_assignment; }
        SG0Mode                 { init_value = 0;                     sg_switch_input_type; }
        SG1Assign               { init_value = 0;                     input_assignment; }
        SG1Mode                 { init_value = 0;                     sg_switch_input_type; }
        SG2Assign               { init_value = 0;                     input_assignment; }
        SG2Mode                 { init_value = 0;                     sg_switch_input_type; }
        SG3Assign               { init_value = 0;                     input_assignment; }
        SG3Mode                 { init_value = 0;                     sg_switch_input_type; }
        SG4Assign               { init_value = 0;                     input_assignment; }
        SG4Mode                 { init_value = 0;                     sg_switch_input_type; }
        SG5Assign               { init_value = 0;                     input_assignment; }
        SG5Mode                 { init_value = 0;                     sg_switch_input_type; }
        SG6Assign               { init_value = 0;                     input_assignment; }
        SG6Mode                 { init_value = 0;                     sg_switch_input_type; }
        SG7Assign               { init_value = 0;                     input_assignment; }
        SG7Mode                 { init_value = 0;                     sg_switch_input_type; }
        SG8Assign               { init_value = 0;                     input_assignment; }
        SG8Mode                 { init_value = 0;                     sg_switch_input_type; }
        SG9Assign               { init_value = 0;                     input_assignment; }
        SG9Mode                 { init_value = 0;                     sg_switch_input_type; }

        SG10Assign              { init_value = 0;                     input_assignment; }
        SG10Mode                { init_value = 0;                     sg_mixed_input_type; }
        SG11Assign              { init_value = 0;                     input_assignment; }
        SG11Mode                { init_value = 0;                     sg_mixed_input_type; }
        SG12Assign              { init_value = 0;                     input_assignment; }
        SG12Mode                { init_value = 0;                     sg_mixed_input_type; }
        SG13Assign              { init_value = 0;                     input_assignment; }
        SG13Mode                { init_value = 0;                     sg_mixed_input_type; }

        TurnBlinkPeriod         { init_value = 500;                   msec; }
        PassingBlinkCount       { init_value = 0;                     up_to_10; }
        PathLightTime           { init_value = 30;                    sec; }
        InteriorLightTime       { init_value = 30;                    sec; }
        WelcomeLightTime        { init_value = 30;                    sec; }
        BrakeBlinkPeriod        { init_value = 0;                     msec; }
        BrakeBlinkCount         { init_value = 0;                     up_to_10; }
        WiperInterval           { init_value = 0;                     msec; }
    }
    encoding {
        input_assignment {
            logical_value, 0, "Unassigned";
            logical_value, 1, "Ignition";
            logical_value, 2, "Start";
            logical_value, 3, "MarkerLights";
            logical_value, 4, "HeadLights";
            logical_value, 5, "HighBeam";
            logical_value, 6, "HighBeamToggle";
            logical_value, 7, "FogLight";
            logical_value, 8, "LeftTurn";
            logical_value, 9, "RightTurn";
            logical_value, 10, "Brake";
            logical_value, 11, "Reverse";
            logical_value, 12, "Door";
            logical_value, 13, "InteriorLight";
            logical_value, 14, "Hazard";
            logical_value, 15, "DoorUnlock";
            logical_value, 16, "LightsUp";
            logical_value, 17, "CabinFan1";
            logical_value, 18, "CabinFan2";
            logical_value, 19, "CabinFan3";
            logical_value, 20, "WiperInt";
            logical_value, 21, "WiperLow";
            logical_value, 22, "WiperHigh";
            logical_value, 23, "RearDefrost";
        }
        // SP inputs are always logic inputs or switches configurable active-high
        // or active-low with a 2mA pull in the opposite direction.
        //
        sp_input_type {
            logical_value, 0, "SwitchToGround";
            logical_value, 1, "SwitchToBattery";
            logical_value, 2, "Logic";
            logical_value, 3, "InvertedLogic";
        }

        // The first 10 SG inputs are always logic inputs or switches always
        // pulled-high active-low with a 2mA pull.
        //
        sg_switch_input_type {
            logical_value, 0, "SwitchToGround";
            logical_value, 2, "Logic";
        }

        // The last 4 SG inputs can be switches active-low, or analog inputs
        // with no, 2mA or 16mA source current.
        // The constraint on the number of inputs is thermally derived; 4 x 16mA
        // input, when shorted to ground, dissipates 4 * 0.016 * 14 = ~1W @ 14V. 
        // All other inputs are run @ 2mA bias, when all are pulled to ground @ 14V
        // the total dissipation is 18 * 0.002 * 14 = ~0.5W.
        // Maximum package dissipation at 25C is 1.7W.
        // Note that TJmax will be exceeded at ~38C ambient in current hardware,
        // #76 tracks improving this.
        //
        sg_mixed_input_type {
            logical_value, 0, "SwitchToGround";
            logical_value, 2, "Logic";
            logical_value, 4, "AnalogNoBias";
            logical_value, 5, "Analog2mABias";
            logical_value, 6, "Analog16mABias";
        }

        msec {
            logical_value, 0, "Disabled";
            physical_value, 100, 65000, 1, 0, "Milliseconds";
        }
        sec {
            logical_value, 0, "Disabled";
            physical_value, 1, 600, 1, 0, "Seconds";
        }
        up_to_10 {
            logical_value, 0, "Disabled";
            physical_value, 1, 10, 1, 0, "Count"; 
        }
        node_address {
            logical_value, 0, "Sleep";
            physical_value, 1, 125, 0, 0, "NodeAddress";
            logical_value, 126, "Functional";
            logical_value, 127, "Broadcast";
        }
        pci {
            logical_value, 0, "SingleFrame";
            logical_value, 1, "FirstFrame";
            logical_value, 2, "ContinuationFrame";
        }
        service_id {
            logical_value, 0x22, "ReadDataByID";
            logical_value, 0x2e, "WriteDataByID";
            logical_value, 0x3e, "TesterPresent";
            logical_value, 0xb2, "ReadByID";
            logical_value, 0xb4, "DataDump";
            logical_value, 0x7f, "ErrorResponse";
            logical_value, 0x40, "ResponseOffset";
        }
    }
}

node PowerV3 {
    general {
        supplier = 0xb007;
        function = 0x0003;  // board_function::kPowerV1
        variant = 0x01;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }
    diagnostic {
        NAD = 2 to 16;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb2 };
    }
    frames {
        subscribe Relays {}
    }
    parameters {
        DeviceStatus    { address = 0x0300; v3_device_status; }
        CH1Status       {                   v3_output_status; }
        CH1DutyCycle    {                   pwm_duty_cycle; }
        CH1Current      {                   }
        CH2Status       {                   v3_output_status; }
        CH2DutyCycle    {                   pwm_duty_cycle; }
        CH2Current      {                   }
        CH3Status       {                   v3_output_status; }
        CH3DutyCycle    {                   pwm_duty_cycle; }
        CH3Current      {                   }
        CH4Status       {                   v3_output_status; }
        CH4DutyCycle    {                   pwm_duty_cycle; }
        CH4Current      {                   }
        CH5Status       {                   v3_output_status; }
        CH5DutyCycle    {                   pwm_duty_cycle; }
        CH5Current      {                   }

        CH1Type         { address = 0x0400; v3_output_type; }
        CH2Type         {                   v3_output_type; }
        CH3Type         {                   v3_output_type; }
        CH4Type         {                   v3_output_type; }
        CH5Type         {                   v3_output_type; }

        CH1Assign1      {                   v3_output_assignment; }
        CH1PWM1         {                   pwm_duty_cycle; }
        CH1Assign2      {                   v3_output_assignment; }
        CH1PWM2         {                   pwm_duty_cycle; }
        CH1Assign3      {                   v3_output_assignment; }
        CH1PWM3         {                   pwm_duty_cycle; }
        CH1Assign4      {                   v3_output_assignment; }
        CH1PWM4         {                   pwm_duty_cycle; }

        CH2Assign1      {                   v3_output_assignment; }
        CH2PWM1         {                   pwm_duty_cycle; }
        CH2Assign2      {                   v3_output_assignment; }
        CH2PWM2         {                   pwm_duty_cycle; }
        CH2Assign3      {                   v3_output_assignment; }
        CH2PWM3         {                   pwm_duty_cycle; }
        CH2Assign4      {                   v3_output_assignment; }
        CH2PWM4         {                   pwm_duty_cycle; }

        CH3Assign1      {                   v3_output_assignment; }
        CH3PWM1         {                   pwm_duty_cycle; }
        CH3Assign2      {                   v3_output_assignment; }
        CH3PWM2         {                   pwm_duty_cycle; }
        CH3Assign3      {                   v3_output_assignment; }
        CH3PWM3         {                   pwm_duty_cycle; }
        CH3Assign4      {                   v3_output_assignment; }
        CH3PWM4         {                   pwm_duty_cycle; }

        CH4Assign1      {                   v3_output_assignment; }
        CH4PWM1         {                   pwm_duty_cycle; }
        CH4Assign2      {                   v3_output_assignment; }
        CH4PWM2         {                   pwm_duty_cycle; }
        CH4Assign3      {                   v3_output_assignment; }
        CH4PWM3         {                   pwm_duty_cycle; }
        CH4Assign4      {                   v3_output_assignment; }
        CH4PWM4         {                   pwm_duty_cycle; }

        CH5Assign1      {                   v3_output_assignment; }
        CH5PWM1         {                   pwm_duty_cycle; }
        CH5Assign2      {                   v3_output_assignment; }
        CH5PWM2         {                   pwm_duty_cycle; }
        CH5Assign3      {                   v3_output_assignment; }
        CH5PWM3         {                   pwm_duty_cycle; }
        CH5Assign4      {                   v3_output_assignment; }
        CH5PWM4         {                   pwm_duty_cycle; }
    }
    encoding {
        v3_device_status {
            logical_value, 0, "OK";
            logical_value, 1, "ChargePump";
            logical_value, 2, "Overvoltage";
            logical_value, 3, "Undervoltage";
            logical_value, 4, "Overload";
        }
        v3_output_status {
            logical_value, 0, "OK";
            logical_value, 1, "OpenLoad";
            logical_value, 2, "TemperatureWarning";
            logical_value, 3, "TemperatureShutdown";
            logical_value, 4, "OverCurrent";
        }
        v3_output_type {
            logical_value, 0, "5AGeneric";
            logical_value, 1, "10AGeneric";
            logical_value, 2, "LED";
            logical_value, 3, "HID";
            logical_value, 4, "LowPowerBulb";
            logical_value, 5, "HighPowerBulb";
            logical_value, 6, "Motor";
        }
        v3_output_assignment {
            logical_value, 0, "Unassigned";
            logical_value, 1, "Ignition";
            logical_value, 2, "Start";
            logical_value, 3, "LightsUp";
            logical_value, 4, "LightsDown";
            logical_value, 5, "HeadLights";
            logical_value, 6, "LowBeam";
            logical_value, 7, "HighBeam";
            logical_value, 8, "FogLights";
            logical_value, 9, "MarkerLights";
            logical_value, 10, "LeftTurn";
            logical_value, 11, "LeftTurnMarker";
            logical_value, 12, "RightTurn";
            logical_value, 13, "RightTurnMarker";
            logical_value, 14, "Brake";
            logical_value, 15, "Reverse";
            logical_value, 16, "InteriorLight";
            logical_value, 17, "CabinFan1";
            logical_value, 18, "CabinFan2";
            logical_value, 19, "CabinFan3";
            logical_value, 20, "CabinFan4";
            logical_value, 21, "WiperLow";
            logical_value, 22, "WiperHigh";
            logical_value, 23, "RearDefrost";
        }
        pwm_duty_cycle {
            physical_value, 0, 100, 1, 0, "Percent"; 
        }
    }
}

node ECUBridge {
    general {
        supplier = 0xb007;
        function = 0x0004;  // board_function::kECUBridge
        variant = 0x10;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }
    diagnostic {
        NAD = 18;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb2 };
    }
    frames {
        publish ECUData {
            length = 8;
            min_period = 10 ms;
            max_period = 100 ms;
            frame_id = 0x02;
            signals {
                RPM                 { size = 8; offset = 0;  RPM; }
                oilPressure         { size = 8; offset = 8;  PSI; }
                oilTemperature      { size = 8; offset = 16; F; }
                coolantTemperature  { size = 8; offset = 24; F; }
                fuelPressure        { size = 8; offset = 32; PSI; }
                voltage             { size = 8; offset = 40; V; }
                AFR                 { size = 8; offset = 48; lambda; }
                roadSpeed           { size = 8; offset = 56; MPH; }
            }
        }
    }
    encoding {
        RPM     { physical_value, 0, 255, 30, 0, "RPM"; }
        PSI     { physical_value, 0, 255, 1, 0, "PSI"; }
        F       { physical_value, 0, 255, 1, 0, "Temperature"; }
        V       { physical_value, 0, 255, 0.1, 0, "Volts"; }
        lambda  { physical_value, 0, 255, 0.1, 0, "Lambda"; }
        MPH     { physical_value, 0, 255, 1, 0, "MPH"; }
    }   
}

node Dashboard {
    general {
        supplier = 0xb007;
        function = 0x0005;  // board_function::kDashboard
        variant = 0x01;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }
    diagnostic {
        NAD = 19;
        diagnostic_class = 1;
        support_sid { 0xb2 };
    }
    frames {
        subscribe Relays {}
        subscribe ECUData {}
    }
    encoding {}
}

node Tester {
    general {
        LIN_protocol_version = "1.0";
        supplier = 0xb007;
        function = 0x0006;
        variant = 0x01;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "yes";
    }
    diagnostic {
        NAD = 20;
        diagnostic_class = 0;
    }
    frames {}
    encoding {}
}
