//
// Experimental node configuration file
//
// XXX not currently in use or guaranteed even close to correct.
// XXX would benefit from some templates exposing frame members, etc.
// XXX LIN API not very good, do not generate code to conform
// XXX NCF lacks a mechanism for defining parameters; the parameters
//     clause here is nonstandard
//
// Note: none of these nodes support Assign Frame Identifier Range, as
//       all frame identifiers in the design are fixed.
// 

node_capability_file;
LIN_language_version = "2.1+";

//
// Generic node definition that can be used when talking to an arbitrary
// node before it has been identified. Defines the baseline for nodes
// in the system.
//
node Generic {
    general {
        LIN_protocol_version = "2.1";
        supplier = 0xb007;
        function = 0x0000;
        variant = 0x00;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }    
    diagnostic {
        NAD = 1 to 32;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb2 };
    }
    frames {
        publish SlaveResponse {
            length = 8;
            frame_id = 0x3c;
            signals {
                nad             { init_value = 0; size = 8; offset = 0; }
                length          { init_value = 0; size = 4; offset = 8; }
                pci             { init_value = 0; size = 4; offset = 12; }
                sid             { init_value = 0; size = 8; offset = 16; service_id; }
                d1              { init_value = 0; size = 8; offset = 24; }
                d2              { init_value = 0; size = 8; offset = 32; }
                d3              { init_value = 0; size = 8; offset = 40; }
                d4              { init_value = 0; size = 8; offset = 48; }
                d5              { init_value = 0; size = 8; offset = 56; }
            }
        }
        publish DataByID {
            length = 8;
            signals {
                nad             { init_value = 0; size = 8; offset = 0; }
                length          { init_value = 0; size = 4; offset = 8; }
                pci             { init_value = 0; size = 4; offset = 12; }
                sid             { init_value = 0; size = 8; offset = 16; service_id; }                
                index           { init_value = 0; size = 16; offset = 24; }
                value           { init_value = 0; size = 16; offset = 40; }
                d5              { init_value = 0; size = 8; offset = 56; }
            }
        }
        subscribe MasterRequest {}
    }
    parameters {
        ProtocolVersion     { address = 0x0000; }
        BoardFunction       { address = 0x0001; }
        BootloaderMode      { address = 0x0002; }
        FirmwareVersion     { address = 0x0003; }
        FirmwarePageSize    { address = 0x0004; }

        WatchdogResets      { address = 0x0100; }
        SupplyVoltage       { address = 0x0101; }
        Temperature         { address = 0x0102; }

        Line                { address = 0x0200; }
        Checksum            { address = 0x0201; }
        Parity              { address = 0x0202; }
        Framing             { address = 0x0203; }
        Synch               { address = 0x0204; }
        Protocol            { address = 0x0205; }
    }
}

node Master {
    general {
        LIN_protocol_version = "2.1";
        supplier = 0xb007;
        function = 0x0000;
        variant = 0x01;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "yes";
    }
    diagnostic {
        NAD = 1;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb2 };
    }
    frames {
        publish Relays {
            length = 8;
            min_period = 10 ms;
            max_period = 100 ms;
            frame_id = 0x01;
            signals {
                Ignition        { init_value = 0; size = 1; offset = 0; }
                Start           { init_value = 0; size = 1; offset = 1; }
                LightsUp        { init_value = 0; size = 1; offset = 2; }
                LightsDown      { init_value = 0; size = 1; offset = 3; }
                HeadLights      { init_value = 0; size = 1; offset = 4; }
                LowBeam         { init_value = 0; size = 1; offset = 5; }
                HighBeam        { init_value = 0; size = 1; offset = 6; }
                FogLights       { init_value = 0; size = 1; offset = 7; }
                Markers         { init_value = 0; size = 1; offset = 8; }
                LeftTurn        { init_value = 0; size = 1; offset = 9; }
                LeftTurnMark    { init_value = 0; size = 1; offset = 10; }
                RightTurn       { init_value = 0; size = 1; offset = 11; }
                RightTurnMark   { init_value = 0; size = 1; offset = 12; }
                Brake           { init_value = 0; size = 1; offset = 13; }
                Reverse         { init_value = 0; size = 1; offset = 14; }
                InteriorLight   { init_value = 0; size = 1; offset = 15; }
                CabinFan1       { init_value = 0; size = 1; offset = 16; }
                CabinFan2       { init_value = 0; size = 1; offset = 17; }
                CabinFan3       { init_value = 0; size = 1; offset = 18; }
                CabinFan4       { init_value = 0; size = 1; offset = 19; }
                WiperLow        { init_value = 0; size = 1; offset = 20; }
                WiperHigh       { init_value = 0; size = 1; offset = 21; }
                RearDefrost     { init_value = 0; size = 1; offset = 22; }
            }
        }
        publish MasterRequest {
            length = 8;
            frame_id = 0x3c;
            signals {
                nad             { init_value = 0; size = 8; offset = 0; }
                length          { init_value = 0; size = 4; offset = 8; }
                pci             { init_value = 0; size = 4; offset = 12; }
                sid             { init_value = 0; size = 8; offset = 16; service_id; }
                d1              { init_value = 0; size = 8; offset = 24; }
                d2              { init_value = 0; size = 8; offset = 32; }
                d3              { init_value = 0; size = 8; offset = 40; }
                d4              { init_value = 0; size = 8; offset = 48; }
                d5              { init_value = 0; size = 8; offset = 56; }
            }
        }
        subscribe ProxyRequest {}
        subscribe SlaveResponse {}
    }
    parameters {
        SP1Assign               { init_value = 0;   address = 0x0400; input; }
        SP2Assign               { init_value = 0;   address = 0x0401; input; }
        SP3Assign               { init_value = 0;   address = 0x0402; input; }
        SP4Assign               { init_value = 0;   address = 0x0403; input; }
        SP5Assign               { init_value = 0;   address = 0x0404; input; }
        SP6Assign               { init_value = 0;   address = 0x0405; input; }
        SP7Assign               { init_value = 0;   address = 0x0406; input; }
        SG0Assign               { init_value = 0;   address = 0x0407; input; }
        SG1Assign               { init_value = 0;   address = 0x0408; input; }
        SG2Assign               { init_value = 0;   address = 0x0409; input; }
        SG3Assign               { init_value = 0;   address = 0x040a; input; }
        SG4Assign               { init_value = 0;   address = 0x040b; input; }
        SG5Assign               { init_value = 0;   address = 0x040c; input; }
        SG6Assign               { init_value = 0;   address = 0x040d; input; }
        SG7Assign               { init_value = 0;   address = 0x040e; input; }
        SG8Assign               { init_value = 0;   address = 0x040f; input; }
        SG9Assign               { init_value = 0;   address = 0x0410; input; }
        SG10Assign              { init_value = 0;   address = 0x0411; input; }
        SG11Assign              { init_value = 0;   address = 0x0412; input; }
        SG12Assign              { init_value = 0;   address = 0x0413; input; }
        SG13Assign              { init_value = 0;   address = 0x0414; input; }
        TurnBlinkPeriod         { init_value = 500; address = 0x0415; msec; }
        PassingBlinkCount       { init_value = 0;   address = 0x0416; up_to_10; }
        PathLightTime           { init_value = 30;  address = 0x0417; sec; }
        InteriorLightTime       { init_value = 30;  address = 0x0418; sec; }
        WelcomeLightTime        { init_value = 30;  address = 0x0419; sec; }
        BrakeBlinkPeriod        { init_value = 0;   address = 0x0420; msec; }
        BrakeBlinkCount         { init_value = 0;   address = 0x0421; up_to_10; }
        WiperInterval           { init_value = 0;   address = 0x0422; msec; }
    }
    encoding {
        input {
            logical_value, 0, "Unassigned";
            logical_value, 1, "Ignition";
            logical_value, 2, "Start";
            logical_value, 3, "MarkerLight";
            logical_value, 4, "HeadLights";
            logical_value, 5, "HighBeam";
            logical_value, 6, "HighBeamToggle";
            logical_value, 7, "FogLight";
            logical_value, 8, "LeftTurn";
            logical_value, 9, "RightTurn";
            logical_value, 10, "Brake";
            logical_value, 11, "Reverse";
            logical_value, 12, "Door";
            logical_value, 13, "InteriorLight";
            logical_value, 14, "Hazard";
            logical_value, 15, "DoorUnlock";
            logical_value, 16, "LightsUp";
            logical_value, 17, "CabinFan1";
            logical_value, 18, "CabinFan2";
            logical_value, 19, "CabinFan3";
            logical_value, 20, "WiperInt";
            logical_value, 21, "WiperLow";
            logical_value, 22, "WiperHigh";
            logical_value, 23, "RearDefrost";
        }
        msec {
            logical_value, 0, "Disabled";
            physical_value, 100, 65000, 1, 0;
        }
        sec {
            logical_value, 0, "Disabled";
            physical_value, 1, 600, 1, 0;
        }
        up_to_10 {
            logical_value, 0, "Disabled";
            physical_value, 1, 10, 1, 0; 
        }
        service_id {
            logical_value, 0x22, "ReadDataByID";      
            logical_value, 0x2e, "WriteDataByID";     
            logical_value, 0x3e, "TesterPresent";     
            logical_value, 0xb2, "ReadByID";          
            logical_value, 0xb4, "DataDump";          
            logical_value, 0x7f, "ErrorResponse";     
        }
    }
}

node PowerV1 {
    general {
        LIN_protocol_version = "2.1";
        supplier = 0xb007;
        function = 0x0001;
        variant = 0x10;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }
    diagnostic {
        NAD = 2 to 16;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb2 };
    }
    frames {
        subscribe Relays {}
    }
    parameters {
        Relay1Assign    { init_value = 0; address = 0x0400; output_assignment; }
        Relay2Assign    { init_value = 0; address = 0x0401; output_assignment; }
        Relay3Assign    { init_value = 0; address = 0x0402; output_assignment; }
        Relay4Assign    { init_value = 0; address = 0x0403; output_assignment; }
    }
    encoding {
        output_assignment {
            logical_value, 0, "Unassigned";
            logical_value, 1, "Ignition";
            logical_value, 2, "Start";
            logical_value, 3, "LightsUp";
            logical_value, 4, "LightsDown";
            logical_value, 5, "HeadLights";
            logical_value, 6, "LowBeam";
            logical_value, 7, "HighBeam";
            logical_value, 8, "FogLights";
            logical_value, 9, "Markers";
            logical_value, 10, "LeftTurn";
            logical_value, 11, "LeftTurnMarker";
            logical_value, 12, "RightTurn";
            logical_value, 13, "RightTurnMarker";
            logical_value, 14, "Brake";
            logical_value, 15, "Reverse";
            logical_value, 16, "InteriorLight";
            logical_value, 17, "CabinFan1";
            logical_value, 18, "CabinFan2";
            logical_value, 19, "CabinFan3";
            logical_value, 20, "CabinFan4";
            logical_value, 21, "WiperLow";
            logical_value, 22, "WiperHigh";
            logical_value, 23, "RearDefrost";
        }
    }
}

node PowerV3 {
    general {
        LIN_protocol_version = "2.1";
        supplier = 0xb007;
        function = 0x0002;
        variant = 0x01;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }
    diagnostic {
        NAD = 2 to 16;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb2 };
    }
    frames {
        subscribe Relays {}
    }
    parameters {
        CH1Type     { init_value = 0;   address = 0x0400; output_type; }
        CH2Type     { init_value = 0;   address = 0x0401; output_type; }
        CH3Type     { init_value = 0;   address = 0x0402; output_type; }
        CH4Type     { init_value = 0;   address = 0x0403; output_type; }
        CH5Type     { init_value = 0;   address = 0x0404; output_type; }

        CH1Assign1  { init_value = 255; address = 0x0410; output_assignment; }
        CH1PWM1     { init_value = 0;   address = 0x0411; pwm_duty_cycle; }
        CH1Assign2  { init_value = 255; address = 0x0412; output_assignment; }
        CH1PWM2     { init_value = 0;   address = 0x0413; pwm_duty_cycle; }
        CH1Assign3  { init_value = 255; address = 0x0414; output_assignment; }
        CH1PWM3     { init_value = 0;   address = 0x0415; pwm_duty_cycle; }
        CH1Assign4  { init_value = 255; address = 0x0416; output_assignment; }
        CH1PWM4     { init_value = 0;   address = 0x0417; pwm_duty_cycle; }

        CH2Assign1  { init_value = 255; address = 0x0420; output_assignment; }
        CH2PWM1     { init_value = 0;   address = 0x0421; pwm_duty_cycle; }
        CH2Assign2  { init_value = 255; address = 0x0422; output_assignment; }
        CH2PWM2     { init_value = 0;   address = 0x0423; pwm_duty_cycle; }
        CH2Assign3  { init_value = 255; address = 0x0424; output_assignment; }
        CH2PWM3     { init_value = 0;   address = 0x0425; pwm_duty_cycle; }
        CH2Assign4  { init_value = 255; address = 0x0426; output_assignment; }
        CH2PWM4     { init_value = 0;   address = 0x0427; pwm_duty_cycle; }

        CH3Assign1  { init_value = 255; address = 0x0430; output_assignment; }
        CH3PWM1     { init_value = 0;   address = 0x0431; pwm_duty_cycle; }
        CH3Assign2  { init_value = 255; address = 0x0432; output_assignment; }
        CH3PWM2     { init_value = 0;   address = 0x0433; pwm_duty_cycle; }
        CH3Assign3  { init_value = 255; address = 0x0434; output_assignment; }
        CH3PWM3     { init_value = 0;   address = 0x0435; pwm_duty_cycle; }
        CH3Assign4  { init_value = 255; address = 0x0436; output_assignment; }
        CH3PWM4     { init_value = 0;   address = 0x0437; pwm_duty_cycle; }

        CH4Assign1  { init_value = 255; address = 0x0440; output_assignment; }
        CH4PWM1     { init_value = 0;   address = 0x0441; pwm_duty_cycle; }
        CH4Assign2  { init_value = 255; address = 0x0442; output_assignment; }
        CH4PWM2     { init_value = 0;   address = 0x0443; pwm_duty_cycle; }
        CH4Assign3  { init_value = 255; address = 0x0444; output_assignment; }
        CH4PWM3     { init_value = 0;   address = 0x0445; pwm_duty_cycle; }
        CH4Assign4  { init_value = 255; address = 0x0446; output_assignment; }
        CH4PWM4     { init_value = 0;   address = 0x0447; pwm_duty_cycle; }

        CH5Assign1  { init_value = 255; address = 0x0450; output_assignment; }
        CH5PWM1     { init_value = 0;   address = 0x0451; pwm_duty_cycle; }
        CH5Assign2  { init_value = 255; address = 0x0452; output_assignment; }
        CH5PWM2     { init_value = 0;   address = 0x0453; pwm_duty_cycle; }
        CH5Assign3  { init_value = 255; address = 0x0454; output_assignment; }
        CH5PWM3     { init_value = 0;   address = 0x0455; pwm_duty_cycle; }
        CH5Assign4  { init_value = 255; address = 0x0456; output_assignment; }
        CH5PWM4     { init_value = 0;   address = 0x0457; pwm_duty_cycle; }
    }
    encoding {
        output_type {
            logical_value, 0, "5AGeneric";
            logical_value, 1, "10AGeneric";
            logical_value, 2, "LED";
            logical_value, 3, "HID";
            logical_value, 4, "LowPowerBulb";
            logical_value, 5, "HighPowerBulb";
            logical_value, 6, "Motor";
        }
        output_assignment {
            logical_value, 0, "Unassigned";
            logical_value, 1, "Ignition";
            logical_value, 2, "Start";
            logical_value, 3, "LightsUp";
            logical_value, 4, "LightsDown";
            logical_value, 5, "HeadLights";
            logical_value, 6, "LowBeam";
            logical_value, 7, "HighBeam";
            logical_value, 8, "FogLights";
            logical_value, 9, "Markers";
            logical_value, 10, "LeftTurn";
            logical_value, 11, "LeftTurnMarker";
            logical_value, 12, "RightTurn";
            logical_value, 13, "RightTurnMarker";
            logical_value, 14, "Brake";
            logical_value, 15, "Reverse";
            logical_value, 16, "InteriorLight";
            logical_value, 17, "CabinFan1";
            logical_value, 18, "CabinFan2";
            logical_value, 19, "CabinFan3";
            logical_value, 20, "CabinFan4";
            logical_value, 21, "WiperLow";
            logical_value, 22, "WiperHigh";
            logical_value, 23, "RearDefrost";
        }
        pwm_duty_cycle { physical_value, 0, 100, 1, 0; }
    }
}

node ECUBridge {
    general {
        LIN_protocol_version = "2.1";
        supplier = 0xb007;
        function = 0x0003;
        variant = 0x10;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }
    diagnostic {
        NAD = 18;
        diagnostic_class = 1;
        support_sid { 0x22, 0x2e, 0xb2 };
    }
    frames {
        publish ECUData {
            length = 8;
            min_period = 10 ms;
            max_period = 100 ms;
            frame_id = 0x02;
            signals {
                RPM                 { init_value = 0; size = 8; offset = 0;  RPM; }
                oilPressure         { init_value = 0; size = 8; offset = 8;  PSI; }
                oilTemperature      { init_value = 0; size = 8; offset = 16; F; }
                coolantTemperature  { init_value = 0; size = 8; offset = 24; F; }
                fuelPressure        { init_value = 0; size = 8; offset = 32; PSI; }
                voltage             { init_value = 0; size = 8; offset = 40; V; }
                AFR                 { init_value = 0; size = 8; offset = 48; lambda; }
                roadSpeed           { init_value = 0; size = 8; offset = 56; MPH; }
            }
        }
    }
    encoding {
        RPM     { physical_value, 0, 255, 30, 0; }
        PSI     { physical_value, 0, 255, 1, 0; }
        F       { physical_value, 0, 255, 1, 0; }
        V       { physical_value, 0, 255, 0.1, 0; }
        lambda  { physical_value, 0, 255, 0.1, 0; }
        MPH     { physical_value, 0, 255, 1, 0; }
    }   
}

node Dashboard {
    general {
        LIN_protocol_version = "2.1";
        supplier = 0xb007;
        function = 0x0004;
        variant = 0x01;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "no";
    }
    diagnostic {
        NAD = 19;
        diagnostic_class = 1;
        support_sid { 0xb2 };
    }
    frames {
        subscribe Relays {}
        subscribe ECUData {}
    }
    encoding {}
}

node Tester {
    general {
        LIN_protocol_version = "2.1";
        supplier = 0xb007;
        function = 0x0005;
        variant = 0x01;
        bitrate = 19.2 kbps;
        sends_wake_up_signal = "yes";
    }
    diagnostic {
        NAD = 20;
        diagnostic_class = 0;
    }
    frames {
        publish ProxyRequest {
            length = 8;
            frame_id = 0x3d;
        }
    }
    encoding {}
}
